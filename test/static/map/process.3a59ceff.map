{"version":3,"sources":["webpack:///./src/pages/process/index.tsx"],"names":["props","useState","route","setRoute","ref","useRef","localtion","useLocation","useEffect","routerUrl","state","onLoadiFrame","iframeWindow","current","contentWindow","navigator","userAgent","match","iframebody","document","body","style","width","clientWidth","useMemo","overflow","WebkitOverflowScrolling","height","getClintHeight","display"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACe,yEAAUA,KAAV,EAAsB;AAAA,kBACTC,sDAAQ,EADC;AAAA;AAAA,MAC5BC,KAD4B;AAAA,MACrBC,QADqB;;AAEnC,MAAMC,GAAG,GAAGC,oDAAM,CAAC,IAAD,CAAlB;AACA,MAAMC,SAAS,GAAGC,4EAAW,EAA7B;AACAC,yDAAS,CAAC,YAAM;AAAA,QACNC,SADM,GACaH,SAAS,CAACI,KADvB,CACND,SADM;AAEdN,YAAQ,CAACM,SAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAMC,YAAY,GAAGR,GAAG,CAACS,OAAJ,CAAYC,aAAjC;;AACA,QAAI,CAACC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,cAA1B,CAAL,EAAgD;AAC9C,aAAO,KAAP;AACD;;AACD,QAAMC,UAAU,GAAGN,YAAY,CAACO,QAAb,CAAsBC,IAAzC;AACAF,cAAU,CAACG,KAAX,CAAiBC,KAAjB,GAAyBH,QAAQ,CAACC,IAAT,CAAcG,WAAd,GAA4B,IAArD;AACD,GAPD;;AASA,SAAOC,qDAAO,CACZ;AAAA,wBACE,qIACE;AAAK,WAAK,EAAE;AAAEC,gBAAQ,EAAE,QAAZ;AAAsBC,+BAAuB,EAAE,OAA/C;AAAwDJ,aAAK,EAAE,MAA/D;AAAuEK,cAAM,YAAKC,4EAAc,EAAnB;AAA7E;AAAZ,oBACE;AACE,SAAG,EAAExB,GADP;AAEE,SAAG,EAAEF,KAFP;AAGE,iBAAW,EAAE,CAHf;AAIE,WAAK,EAAE;AAAEoB,aAAK,EAAE,MAAT;AAAiBO,eAAO,EAAE,MAA1B;AAAkCF,cAAM,YAAKC,4EAAc,EAAnB,OAAxC;AAAmEH,gBAAQ,EAAE;AAA7E,OAJT;AAKE,eAAS,EAAC,IALZ;AAME,YAAM,EAAEd;AANV,MADF,CADF,CADF;AAAA,GADY,EAeZ,CAACT,KAAD,CAfY,CAAd;AAiBD,C","file":"static/js/process.7fc848a8.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport React, { useRef, useEffect, useState, useMemo } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { getHost, getClintHeight } from \"@/utils/common\";\r\nexport default function (props: any) {\r\n  const [route, setRoute] = useState();\r\n  const ref = useRef(null);\r\n  const localtion = useLocation();\r\n  useEffect(() => {\r\n    const { routerUrl }: any = localtion.state;\r\n    setRoute(routerUrl);\r\n  }, []);\r\n  const onLoadiFrame = () => {\r\n    const iframeWindow = ref.current.contentWindow;\r\n    if (!navigator.userAgent.match(/iPad|iPhone/i)) {\r\n      return false;\r\n    }\r\n    const iframebody = iframeWindow.document.body;\r\n    iframebody.style.width = document.body.clientWidth + \"px\";\r\n  };\r\n\r\n  return useMemo(\r\n    () => (\r\n      <>\r\n        <div style={{ overflow: \"scroll\", WebkitOverflowScrolling: \"touch\", width: \"100%\", height: `${getClintHeight()}px` }}>\r\n          <iframe\r\n            ref={ref}\r\n            src={route}\r\n            frameBorder={0}\r\n            style={{ width: \"100%\", display: \"flex\", height: `${getClintHeight()}px`, overflow: \"visible\" }}\r\n            scrolling=\"no\"\r\n            onLoad={onLoadiFrame}\r\n          />\r\n        </div>\r\n      </>\r\n    ),\r\n    [route]\r\n  );\r\n}\r\n"],"sourceRoot":""}